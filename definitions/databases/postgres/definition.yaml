apiVersion: acid.zalan.do/v1
kind: postgresql
metadata:
  name: {{ .Name }}
  namespace: {{ .Namespace }} 
  labels:
    # Zalando labels
    team: {{ .TeamID }}
    # usd-specific labels
    unbind/usd-type: {{ .Definition.Type }}
    unbind/usd-version: {{ .Definition.Version }}
    unbind/usd-category: databases
    {{- range $key, $value := .Parameters.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  teamId: {{ .TeamID }}
  dockerImage: {{ .Parameters.dockerImage | default "unbindapp/spilo:17" }}
  enableMasterLoadBalancer: {{ .Parameters.enableMasterLoadBalancer | default false | quote }}
  postgresql:
    version: {{ .Parameters.version | default "17" | quote }}
  numberOfInstances: {{ .Parameters.common.replicas | default 1 }}
  allowedSourceRanges:
    - 0.0.0.0/0
  patroni:
    pg_hba:
    # Keep for pam authentication
    - "hostssl all +pamrole all pam"
    # Force SSL for external
    - "hostssl all all 0.0.0.0/0 md5"
    # Allow nonâ€‘SSL md5 inside the pod network (k3s)
    - "host    all all 10.42.0.0/16 md5"
    # Allow non-ssl md5 inside the pod network (others like microk8s)
    - "host    all all 10.1.0.0/16 md5"
    # Allow non-ssl md5 inside the pod network (others common k8s distributions)
    - "host    all all 10.0.0.0/8 md5"
    # Local loopback
    - "host    all all 127.0.0.1/32 trust"
  volume:
    size: {{ .Parameters.common.storage | default "1Gi" }}
  resources:
    requests:
      cpu: {{ .Parameters.common.resources.requests.cpu | default "100m" }}
      memory: {{ .Parameters.common.resources.requests.memory | default "128Mi" }}
    limits:
      cpu: {{ .Parameters.common.resources.limits.cpu | default "500m" }}
      memory: {{ .Parameters.common.resources.limits.memory | default "256Mi" }}
  env:
    - name: ALLOW_NOSSL
      value: "true"
  {{- if .Parameters.s3.enabled }}
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: {{ .Name }}-s3-credentials
          key: accessKey
    - name: AWS_ENDPOINT
      value: {{ .Parameters.s3.endpoint }}
    - name: AWS_REGION
      value: {{ .Parameters.s3.region }}
    - name: AWS_S3_FORCE_PATH_STYLE
      value: {{ .Parameters.s3.forcePathStyle | quote }}
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: {{ .Name }}-s3-credentials
          key: secretKey
    - name: BACKUP_NUM_TO_RETAIN
      value: {{ .Parameters.s3.backupRetention | default 5 | quote }}
    - name: BACKUP_SCHEDULE
      value: {{ .Parameters.s3.backupSchedule | default "5 5 * * *" }}
    - name: CLONE_AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: {{ .Name }}-s3-credentials
          key: accessKey
    - name: CLONE_AWS_ENDPOINT
      value: {{ .Parameters.s3.endpoint }}
    - name: CLONE_AWS_REGION
      value: {{ .Parameters.s3.region }}
    - name: CLONE_AWS_S3_FORCE_PATH_STYLE
      value: {{ .Parameters.s3.forcePathStyle | quote }}
    - name: CLONE_AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: {{ .Name }}-s3-credentials
          key: secretKey
    - name: CLONE_METHOD
      value: "CLONE_WITH_WALE"
    - name: CLONE_USE_WALG_RESTORE
      value: "true"
    - name: CLONE_WAL_BUCKET_SCOPE_PREFIX
      value: ""
    - name: CLONE_WAL_S3_BUCKET
      value: {{ .Parameters.s3.bucket }}
    - name: USE_WALG_BACKUP
      value: "true"
    - name: USE_WALG_RESTORE
      value: "true"
    - name: WAL_BUCKET_SCOPE_PREFIX
      value: ""
    - name: WAL_BUCKET_SCOPE_SUFFIX
      value: ""
    - name: WAL_S3_BUCKET
      value: {{ .Parameters.s3.bucket }}
    - name: WALG_DISABLE_S3_SSE
      value: "true"
  {{- end }}