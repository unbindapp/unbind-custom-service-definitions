apiVersion: v1
kind: Secret
metadata:
  name: {{ .Name }}-password-generator
  namespace: {{ .Namespace }}
  labels:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: {{ .Name }}
    unbind/usd-type: {{ .Definition.Type | quote }}
    unbind/usd-version: {{ .Definition.Version | quote }}
    unbind/usd-category: databases
    {{- range $key, $value := .Parameters.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
type: Opaque
stringData:
  password: {{ generatePassword 32 }}
---
apiVersion: mongodbcommunity.mongodb.com/v1
kind: MongoDBCommunity
metadata:
  name: {{ .Name }}
  namespace: {{ .Namespace }}
  labels:
    # Operator labels
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: {{ .Name }}
    # usd-specific labels
    unbind/usd-type: {{ .Definition.Type | quote }}
    unbind/usd-version: {{ .Definition.Version | quote }}
    unbind/usd-category: databases
    {{- range $key, $value := .Parameters.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}

spec:
  members: {{ .Parameters.common.replicas | default 1 }}
  type: ReplicaSet
  version: {{ .Parameters.version | default "7.0" | quote }}

  security:
    authentication:
      modes: ["SCRAM"]
      ignoreUnknownUsers: true

  users:
    - name: admin
      db: admin
      passwordSecretRef:
        name: {{ .Name }}-password-generator
      roles:
        - name: clusterAdmin
          db: admin
        - name: userAdminAnyDatabase
          db: admin
      scramCredentialsSecretName: {{ .Name }}-scram-credentials

  statefulSet:
    spec:
      # PersistentVolumeClaim for each pod
      volumeClaimTemplates:
      - metadata:
          name: data-volume      
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: {{ .Parameters.common.storage | default "1Gi" }}

      # Pod template overrides
      template:
        spec:
          containers:
          - name: mongod
            resources:
              requests:
                cpu:    {{ .Parameters.common.resources.requests.cpu   | default "100m" }}
                memory: {{ .Parameters.common.resources.requests.memory| default "128Mi" }}
              limits:
                cpu:    {{ .Parameters.common.resources.limits.cpu     | default "500m" }}
                memory: {{ .Parameters.common.resources.limits.memory  | default "256Mi" }}
            {{- if .Parameters.environment }}
            env:
            {{- range $k, $v := .Parameters.environment }}
            - name: {{ $k }}
              value: {{ $v | quote }}
            {{- end }}
            {{- end }}

  additionalMongodConfig:
    storage:
      wiredTiger:
        engineConfig:
          cacheSizeGB: 0.25
{{- if .Parameters.common.exposeExternal }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Name }}-external
  namespace: {{ .Namespace }}
  labels:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: {{ .Name }}
    unbind/usd-type: {{ .Definition.Type | quote }}
    unbind/usd-version: {{ .Definition.Version | quote }}
    unbind/usd-category: databases
    {{- range $key, $value := .Parameters.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  type: LoadBalancer
  ports:
    - port: 27017
      targetPort: 27017
      protocol: TCP
  selector:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: {{ .Name }}
{{- end }}
{{- if .Parameters.s3.enabled }}
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Name }}-backup
  namespace: {{ .Namespace }}
  labels:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: {{ .Name }}
    unbind/usd-type: {{ .Definition.Type | quote }}
    unbind/usd-version: {{ .Definition.Version | quote }}
    unbind/usd-category: databases
    {{- range $key, $value := .Parameters.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  schedule: {{ .Parameters.s3.backupSchedule | default "5 5 * * *" | quote }}
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: mongodump
            image: mongo:{{ .Parameters.version | default "7.0" }}
            command:
            - /bin/sh
            - -c
            - |
              mongodump --host={{ .Name }}-svc.{{ .Namespace }}.svc.cluster.local --out=/backup/$(date +%Y%m%d_%H%M%S) && \
              aws s3 sync /backup s3://{{ .Parameters.s3.bucket }}/{{ .Parameters.s3.backupPrefix }}/backups/{{ .Name }} --endpoint-url={{ .Parameters.s3.endpoint }} --region={{ .Parameters.s3.region }} && \
              find /backup -type d -mtime +{{ .Parameters.s3.backupRetention | default 2 }} -exec rm -rf {} \;
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: {{ .Parameters.s3.secretName }}
                  key: {{ .Parameters.s3.accessKey | default "access_key_id" }}
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Parameters.s3.secretName }}
                  key: {{ .Parameters.s3.secretKey | default "secret_key" }}
            volumeMounts:
            - name: backup
              mountPath: /backup
          volumes:
          - name: backup
            emptyDir: {}
          restartPolicy: OnFailure
{{- end }}
{{- if .Parameters.restore.enabled }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Name }}-restore
  namespace: {{ .Namespace }}
  labels:
    app.kubernetes.io/name: mongodb
    app.kubernetes.io/instance: {{ .Name }}
    unbind/usd-type: {{ .Definition.Type | quote }}
    unbind/usd-version: {{ .Definition.Version | quote }}
    unbind/usd-category: databases
    {{- range $key, $value := .Parameters.labels }}
    {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  template:
    spec:
      containers:
      - name: mongorestore
        image: mongo:{{ .Parameters.version | default "7.0" }}
        command:
        - /bin/sh
        - -c
        - |
          aws s3 sync s3://{{ .Parameters.restore.bucket }}/{{ .Parameters.restore.backupPrefix }}/backups/{{ .Parameters.restore.cluster }} /restore --endpoint-url={{ .Parameters.restore.endpoint }} --region={{ .Parameters.restore.region }} && \
          mongorestore --host={{ .Name }}-svc.{{ .Namespace }}.svc.cluster.local /restore/$(ls -t /restore | head -n1)
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Parameters.restore.secretName }}
              key: {{ .Parameters.restore.accessKey | default "access_key_id" }}
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Parameters.restore.secretName }}
              key: {{ .Parameters.restore.secretKey | default "secret_key" }}
        volumeMounts:
        - name: restore
          mountPath: /restore
      volumes:
      - name: restore
        emptyDir: {}
      restartPolicy: OnFailure
{{- end }} 