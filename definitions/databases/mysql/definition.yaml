{{- /* convenience helpers */ -}}
{{- $common := .Parameters.common -}}
{{- $s3     := .Parameters.s3 -}}
{{- $restore:= .Parameters.restore -}}
{{- $labels := .Parameters.labels | default dict -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Name }}-custom-mycnf
  namespace: {{ .Namespace }}
  labels:
    unbind/usd-type: {{ .Definition.Type | quote }}
    unbind/usd-version: {{ .Definition.Version | quote }}
    unbind/usd-category: databases
{{- range $k, $v := $labels }}
    {{ $k }}: {{ $v | quote }}
{{- end }}
data:
  innodb-dedicated-server: "OFF"
  innodb_redo_log_capacity: "134217728"

  innodb_buffer_pool_size: "134217728"
  key_buffer_size: "8388608"
  max_connections: "50"
  performance_schema: "OFF"
  performance_schema_instrument: "'%=OFF'"
  innodb_stats_persistent: "0"
---
apiVersion: moco.cybozu.com/v1beta2
kind: MySQLCluster
metadata:
  name: {{ .Name }}
  namespace: {{ .Namespace }}
  labels:
    # operator labels
    app.kubernetes.io/name:  mysql
    app.kubernetes.io/instance: {{ .Name }}
    # usd-specific labels
    unbind/usd-type: {{ .Definition.Type | quote }}
    unbind/usd-version: {{ .Definition.Version | quote }}
    unbind/usd-category: databases
{{- range $k, $v := $labels }}
    {{ $k }}: {{ $v | quote }}
{{- end }}

spec:
  replicas: {{ $common.replicas | default 1 }}
  mysqlConfigMapName: {{ .Name }}-custom-mycnf

  podTemplate:
    metadata:
      labels:
        # Propagate custom labels to pods
{{- range $k, $v := $labels }}
        {{ $k }}: {{ $v | quote }}
{{- end }}
    spec:
      containers:
        - name: mysqld
          image: {{ printf "ghcr.io/cybozu-go/moco/mysql:%s" (.Parameters.version | default "8.4.4") | quote }}
          resources:
            requests:
              cpu:    {{ $common.resources.requests.cpu    | default "10m"   | quote }}
              memory: {{ $common.resources.requests.memory | default "10Mi"  | quote }}
            limits:
              cpu:    {{ $common.resources.limits.cpu      | default "500m"  | quote }}
              memory: {{ $common.resources.limits.memory   | default "512Mi" | quote }}
{{- if .Parameters.environment }}
          env:
{{- range $k, $v := .Parameters.environment }}
            - name: {{ $k }}
              value: {{ $v | quote }}
{{- end }}
{{- end }}
  volumeClaimTemplates:
    - metadata:
        name: mysql-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ $common.storage | default "1Gi" | quote }}
{{- if $s3.enabled }}
  backupPolicyName: {{ .Name }}-backup
{{- end }}

{{- if $restore.enabled }}
  restore:
    sourceName:      {{ $restore.cluster }}
    sourceNamespace: {{ .Namespace }}
    restorePoint: {{ $restore.restorePoint | default (timeFormat .RFC3339 now) | quote }}
    jobConfig:
      serviceAccountName: default
      bucketConfig:
        bucketName:   {{ $restore.bucket | default $s3.bucket | quote }}
        endpointURL:  {{ $restore.endpoint | default $s3.endpoint | quote }}
        region:       {{ $restore.region   | default $s3.region   | quote }}
        usePathStyle: true
      env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ $restore.secretName }}
              key:  {{ $restore.accessKey | default "access_key_id" }}
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ $restore.secretName }}
              key:  {{ $restore.secretKey | default "secret_key" }}
      workVolume:
        emptyDir: {}
{{- end }}
---
{{- if $s3.enabled }}
apiVersion: moco.cybozu.com/v1beta2
kind: BackupPolicy
metadata:
  name: {{ .Name }}-backup
  namespace: {{ .Namespace }}
  labels:
    unbind/usd-type: {{ .Definition.Type | quote }}
    unbind/usd-version: {{ .Definition.Version | quote }}
    unbind/usd-category: databases
{{- range $k, $v := $labels }}
    {{ $k }}: {{ $v | quote }}
{{- end }}

spec:
  schedule: {{ $s3.backupSchedule | default "5 5 * * *" | quote }}
  jobConfig:
    serviceAccountName: default 
    env:
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            name: {{ $s3.secretName }}
            key:  {{ $s3.accessKey | default "access_key_id" }}
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            name: {{ $s3.secretName }}
            key:  {{ $s3.secretKey | default "secret_key" }}
    bucketConfig:
      bucketName:  {{ $s3.bucket | quote }}
      endpointURL: {{ $s3.endpoint | quote }}
      region:      {{ $s3.region   | quote }}
      usePathStyle: true
    workVolume:
      emptyDir: {}
{{- end }}
